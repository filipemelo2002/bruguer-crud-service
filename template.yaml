AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  burguer-crud-service

  Sample SAM Template for burguer-crud-service

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

    # You can add LoggingConfig parameters such as the Logformat, Log Group, and SystemLogLevel or ApplicationLogLevel. Learn more here https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-loggingconfig.
    LoggingConfig:
      LogFormat: JSON
    Environment:
      Variables:
        DATABASE: burguer-app 
        HOST: sam-postgre
        USERNAME: sam-user 
        PASSWORD: my-password
Resources:
  GetIngredientsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: service/
      Handler: app.getIngredients
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      Events:
        List:
          Type: Api
          Properties:
            Path: /ingredients
            Method: get
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true 
        Target: es2020
        Sourcemap: true
        EntryPoints:
        - app.ts
  CreateIngredientFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: service/
      Handler: app.createIngredient
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      Events:
        Create:
          Type: Api
          Properties:
            Path: /ingredients
            Method: post
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true 
        Target: es2020
        Sourcemap: true
        EntryPoints:
        - app.ts
  
  UpdateIngredientFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: service/
      Handler: app.updateIngredient
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      Events:
        Update:
          Type: Api
          Properties:
            Path: /ingredients/{id}
            Method: put 
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true 
        Target: es2020
        Sourcemap: true
        EntryPoints:
        - app.ts
  
  GetIngredientFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: service/
      Handler: app.getIngredient
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      Events:
        Get:
          Type: Api
          Properties:
            Path: /ingredients/{id}
            Method: get 
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true 
        Target: es2020
        Sourcemap: true
        EntryPoints:
        - app.ts
  DeleteIngredientFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: service/
      Handler: app.deleteIngredient
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      Events:
        Delete:
          Type: Api
          Properties:
            Path: /ingredients/{id}
            Method: delete 
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true 
        Target: es2020
        Sourcemap: true
        EntryPoints:
        - app.ts
  CreateSnackFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: service/
      Handler: app.createSnack
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      Events:
        Create:
          Type: Api
          Properties:
            Path: /snacks
            Method: post 
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true 
        Target: es2020
        Sourcemap: true
        EntryPoints:
        - app.ts

  GetSnacksFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: service/
      Handler: app.getSnacks
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      Events:
        List:
          Type: Api
          Properties:
            Path: /snacks
            Method: get 
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true 
        Target: es2020
        Sourcemap: true
        EntryPoints:
        - app.ts
  GetSnackFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: service/
      Handler: app.getSnack
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      Events:
        Get:
          Type: Api
          Properties:
            Path: /snacks/{id}
            Method: get 
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true 
        Target: es2020
        Sourcemap: true
        EntryPoints:
        - app.ts
  UpdateSnackFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: service/
      Handler: app.updateSnack
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      Events:
        Update:
          Type: Api
          Properties:
            Path: /snacks/{id}
            Method: put 
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true 
        Target: es2020
        Sourcemap: true
        EntryPoints:
        - app.ts
  DeleteSnackFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: service/
      Handler: app.deleteSnack
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      Events:
        Delete:
          Type: Api
          Properties:
            Path: /snacks/{id}
            Method: delete
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true 
        Target: es2020
        Sourcemap: true
        EntryPoints:
        - app.ts

  CreateOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: service/
      Handler: app.createOrder
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      Events:
        Create:
          Type: Api
          Properties:
            Path: /orders
            Method: post
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true 
        Target: es2020
        Sourcemap: true
        EntryPoints:
        - app.ts

  GetOrdersFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: service/
      Handler: app.getOrders
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      Events:
        List:
          Type: Api
          Properties:
            Path: /orders
            Method: get
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true 
        Target: es2020
        Sourcemap: true
        EntryPoints:
        - app.ts
Outputs:
  GetIngredientsFunctionAPI:
    Description: API Gateway endpoint URL for Prod stage for GetIngredients function
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/ingredients/"
  GetIngredientsFunction:
    Description: Get Ingredients Function ARN
    Value: !GetAtt GetIngredientsFunction.Arn
  GetIngredientsFunctionIamRole:
    Description: Implicit IAM Role created for GetIngredientsFunction function
    Value: !GetAtt GetIngredientsFunction.Arn

  CreateIngredientFunctionAPI:
    Description: API Gateway endpoint URL for Prod stage for CreateIngredient function
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/ingredients/"
  CreateIngredientFunction:
    Description: Create Ingredient Function ARN
    Value: !GetAtt CreateIngredientFunction.Arn
  CreateIngredientFunctionIamRole:
    Description: Implicit IAM Role created for CreateIngredientFunction function
    Value: !GetAtt CreateIngredientFunction.Arn

  UpdateIngredientFunctionAPI:
    Description: API Gateway endpoint URL for Prod stage for UpdateIngredient function
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/ingredients/{id}"
  UpdateIngredientFunction:
    Description: Update Ingredient Function ARN
    Value: !GetAtt UpdateIngredientFunction.Arn
  UpdateIngredientFunctionIamRole:
    Description: Implicit IAM Role created for UpdateIngredientFunction function
    Value: !GetAtt UpdateIngredientFunction.Arn

  GetIngredientFunctionAPI:
    Description: API Gateway endpoint URL for Prod stage for GetIngredient function
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/ingredients/{id}"
  GetIngredientFunction:
    Description: Get Ingredient Function ARN
    Value: !GetAtt GetIngredientFunction.Arn
  GetIngredientFunctionIamRole:
    Description: Implicit IAM Role created for GetIngredientFunction function
    Value: !GetAtt GetIngredientFunction.Arn

  DeleteIngredientFunctionAPI:
    Description: API Gateway endpoint URL for Prod stage for DeleteIngredient function
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/ingredients/{id}"
  DeleteIngredientFunction:
    Description: Delete Ingredient Function ARN
    Value: !GetAtt DeleteIngredientFunction.Arn
  DeleteIngredientFunctionIamRole:
    Description: Implicit IAM Role created for DeleteIngredientFunction function
    Value: !GetAtt DeleteIngredientFunction.Arn

  CreateSnackFunctionAPI:
    Description: API Gateway endpoint URL for Prod stage for CreateSnack function
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/snacks/"
  CreateSnackFunction:
    Description: Create Snack Function ARN
    Value: !GetAtt CreateSnackFunction.Arn
  CreateSnackFunctionIamRole:
    Description: Implicit IAM Role created for CreateSnackFunction function
    Value: !GetAtt CreateSnackFunction.Arn

  GetSnacksFunctionAPI:
    Description: API Gateway endpoint URL for Prod stage for GetSnacks function
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/snacks/"
  GetSnacksFunction:
    Description: Get Snacks Function ARN
    Value: !GetAtt GetSnacksFunction.Arn
  GetSnacksFunctionIamRole:
    Description: Implicit IAM Role created for GetSnacksFunction function
    Value: !GetAtt GetSnacksFunction.Arn

  GetSnackFunctionAPI:
    Description: API Gateway endpoint URL for Prod stage for GetSnack function
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/snacks/{id}"
  GetSnackFunction:
    Description: Get Snack Function ARN
    Value: !GetAtt GetSnackFunction.Arn
  GetSnackFunctionIamRole:
    Description: Implicit IAM Role created for GetSnackFunction function
    Value: !GetAtt GetSnackFunction.Arn

  UpdateSnackFunctionAPI:
    Description: API Gateway endpoint URL for Prod stage for UpdateSnack function
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/snacks/{id}"
  UpdateSnackFunction:
    Description: Update Snack Function ARN
    Value: !GetAtt UpdateSnackFunction.Arn
  UpdateSnackFunctionIamRole:
    Description: Implicit IAM Role created for UpdateSnackFunction function
    Value: !GetAtt UpdateSnackFunction.Arn

  DeleteSnackFunctionAPI:
    Description: API Gateway endpoint URL for Prod stage for DeleteSnack function
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/snacks/{id}"
  DeleteSnackFunction:
    Description: Delete Snack Function ARN
    Value: !GetAtt DeleteSnackFunction.Arn
  DeleteSnackFunctionIamRole:
    Description: Implicit IAM Role created for DeleteSnackFunction function
    Value: !GetAtt DeleteSnackFunction.Arn

  CreateOrderFunctionAPI:
    Description: API Gateway endpoint URL for Prod stage for CreateOrder function
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/orders/"
  CreateOrderFunction:
    Description: Create Order Function ARN
    Value: !GetAtt CreateOrderFunction.Arn
  CreateOrderFunctionIamRole:
    Description: Implicit IAM Role created for CreateOrderFunction function
    Value: !GetAtt CreateOrderFunction.Arn

  GetOrdersFunctionAPI:
    Description: API Gateway endpoint URL for Prod stage for GetOrders function
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/orders/"
  GetOrdersFunction:
    Description: Get Orders Function ARN
    Value: !GetAtt GetOrdersFunction.Arn
  GetOrdersFunctionIamRole:
    Description: Implicit IAM Role created for GetOrdersFunction function
    Value: !GetAtt GetOrdersFunction.Arn