AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  burguer-crud-service

  Sample SAM Template for burguer-crud-service

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

    # You can add LoggingConfig parameters such as the Logformat, Log Group, and SystemLogLevel or ApplicationLogLevel. Learn more here https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-loggingconfig.
    LoggingConfig:
      LogFormat: JSON
    Environment:
      Variables:
        DATABASE: burguer-app 
        HOST: sam-postgre
        USERNAME: sam-user 
        PASSWORD: my-password
Resources:
  GetIngredientsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: service/
      Handler: app.getIngredients
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      Events:
        GetIngredients:
          Type: Api
          Properties:
            Path: /ingredients
            Method: get
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true 
        Target: es2020
        Sourcemap: true
        EntryPoints:
        - app.ts
  CreateIngredientFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: service/
      Handler: app.createIngredient
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      Events:
        GetIngredients:
          Type: Api
          Properties:
            Path: /ingredients
            Method: post
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true 
        Target: es2020
        Sourcemap: true
        EntryPoints:
        - app.ts
  
  UpdateIngredientFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: service/
      Handler: app.updateIngredient
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      Events:
        GetIngredients:
          Type: Api
          Properties:
            Path: /ingredients/{id}
            Method: put 
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true 
        Target: es2020
        Sourcemap: true
        EntryPoints:
        - app.ts
  
  GetIngredientFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: service/
      Handler: app.getIngredient
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      Events:
        GetIngredients:
          Type: Api
          Properties:
            Path: /ingredients/{id}
            Method: get 
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true 
        Target: es2020
        Sourcemap: true
        EntryPoints:
        - app.ts
  DeleteIngredientFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: service/
      Handler: app.deleteIngredient
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      Events:
        GetIngredients:
          Type: Api
          Properties:
            Path: /ingredients/{id}
            Method: delete 
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true 
        Target: es2020
        Sourcemap: true
        EntryPoints:
        - app.ts
  CreateSnackFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: service/
      Handler: app.createSnack
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      Events:
        GetIngredients:
          Type: Api
          Properties:
            Path: /snacks
            Method: post 
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true 
        Target: es2020
        Sourcemap: true
        EntryPoints:
        - app.ts

  GetSnacksFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: service/
      Handler: app.getSnacks
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      Events:
        GetIngredients:
          Type: Api
          Properties:
            Path: /snacks
            Method: get 
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true 
        Target: es2020
        Sourcemap: true
        EntryPoints:
        - app.ts
Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  HelloWorldApi:
    Description: API Gateway endpoint URL for Prod stage for Hello World function
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
  HelloWorldFunction:
    Description: Hello World Lambda Function ARN
    Value: !GetAtt HelloWorldFunction.Arn
  HelloWorldFunctionIamRole:
    Description: Implicit IAM Role created for Hello World function
    Value: !GetAtt HelloWorldFunctionRole.Arn
